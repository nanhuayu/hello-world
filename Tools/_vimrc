source $VIMRUNTIME/vimrc_example.vim
source $VIMRUNTIME/mswin.vim
behave mswin

"==========================================
" VIM chinese encoding
"==========================================
set encoding=utf-8 
set fileencodings=utf-8,gbk,latin-1
"if has("win32")
"    set fileencoding=gbk
"else
"    set fileencoding=utf-8
"endif
" VIM gbk menu encoding
source $VIMRUNTIME/delmenu.vim
source $VIMRUNTIME/menu.vim
language messages zh_CN.utf-8
set termencoding=gbk


"==========================================
" VIM GUI setting
"==========================================
"设置字体
set guifont=Source_Code_Pro:h10.5
set lines=27 columns=112
set guioptions-=T

set nobackup
set noundofile
set noswapfile

colorscheme molokai 

"设置窗口透明
if executable("vimtweak.dll") 
autocmd guienter * call libcallnr("vimtweak","SetAlpha",225) 
endif 

"==========================================
" Initial Plugin 加载插件
"==========================================

"pathogen 插件设置
execute pathogen#infect()


" NOTE: 以下配置有详细说明，一些特性不喜欢可以直接注解掉

"==========================================
" General Settings 基础设置
"==========================================

" history存储容量
set history=2000

" 开启语法高亮
syntax on

" 检测文件类型
filetype on
" 针对不同的文件类型采用不同的缩进格式
filetype indent on
" 允许插件
filetype plugin on
" 启动自动补全
filetype plugin indent on

" 突出显示当前列
"set cursorcolumn
" 突出显示当前行
set cursorline

" 设置 退出vim后，内容显示在终端屏幕, 可以用于查看和复制, 不需要可以去掉
" 好处：误删什么的，如果以前屏幕打开，可以找回
"set t_ti= t_te=

"==========================================
" Display Settings 展示/排版等界面格式设置
"==========================================

" 显示当前的行号列号
set ruler
" 在状态栏显示正在输入的命令
set showcmd
" 左下角显示当前vim模式
set showmode

" 显示行号
set number
" 取消换行
set wrap

" 括号配对情况, 跳转并高亮一下匹配的括号
set showmatch
" How many tenths of a second to blink when matching brackets
set matchtime=2

" 设置文内智能搜索提示
" 高亮search命中的文本
set hlsearch
" 打开增量搜索模式,随着键入即时搜索
set incsearch
" 搜索时忽略大小写
set ignorecase
" 有一个或以上大写字母时仍大小写敏感
set smartcase

" 代码折叠
set foldenable
" 折叠方法
" manual    手工折叠
" indent    使用缩进表示折叠
" expr      使用表达式定义折叠
" syntax    使用语法定义折叠
" diff      对没有更改的文本进行折叠
" marker    使用标记进行折叠, 默认标记是 {{{ 和 }}}
set foldmethod=indent
set foldlevel=99

" 缩进配置
" Smart indent
set smartindent
" 打开自动缩进
" never add copyindent, case error   " copy the previous indentation on autoindenting
set autoindent

" tab相关变更
" 设置Tab键的宽度        [等同的空格个数]
set tabstop=4
" 每一次缩进对应的空格数
set shiftwidth=4
" 按退格键时可以一次删掉 4 个空格
set softtabstop=4
" insert tabs on the start of a line according to shiftwidth, not tabstop 按退格键时可以一次删掉 4 个空格
set smarttab
" 将Tab自动转化成空格[需要输入真正的Tab键时，使用 Ctrl+V + Tab]
set expandtab
" 缩进时，取整 use multiple of shiftwidth when indenting with '<' and '>'
set shiftround

" A buffer becomes hidden when it is abandoned
set hidden
set wildmode=list:longest
set ttyfast


"==========================================
" others 其它设置
"==========================================
" vimrc文件修改之后自动加载, windows
autocmd! bufwritepost _vimrc source %
" vimrc文件修改之后自动加载, linux
autocmd! bufwritepost .vimrc source %

" 自动补全配置
" 让Vim的补全菜单行为与一般IDE一致(参考VimTip1228)
set completeopt=longest,menu

" 打开自动定位到最后编辑的位置, 需要确认 .viminfo 当前用户可写
if has("autocmd")
  au BufReadPost * if line("'\"") > 1 && line("'\"") <= line("$") | exe "normal! g'\"" | endif
endif

autocmd StdinReadPre * let s:std_in=1

"==========================================
" omnicppcomplete插件
"==========================================
set nocp
set tags+=/home/yk/.vim/tags/cpp
let OmniCpp_GlobalScopeSearch = 1
let OmniCpp_NamespaceSearch = 1
let OmniCpp_DisplayMode = 0
let OmniCpp_ShowPrototypeInAbbr = 1
let OmniCpp_ShowAccess = 1
let OmniCpp_DefaultNamespaces = ["std"]
let OmniCpp_MayCompleteDot = 1
let OmniCpp_MayCompleteArrow = 1
let OmniCpp_MayCompleteScope = 1
let OmniCpp_SelectFirstItem = 1
au CursorMovedI,InsertLeave * if pumvisible() == 0|silent! pclose|endif 
set completeopt=menuone,menu,longest,preview
hi Pmenu guibg=#708090  guifg=#000000
hi PmenuSel guibg=#2F4F4F

"==========================================
" NERD_Tree插件
"==========================================
autocmd VimEnter * if argc() == 0 && !exists("s:std_in") | NERDTree
autocmd bufenter * if (winnr("$") == 1 && exists("b:NERDTreeType") && b:NERDTreeType == "primary") | q | endif
"autocmd BufRead * NERDTree
let NERDTreeSortOrder=['//$','/.cpp$','/.c$', '/.h$', '/.py$', '/.lua$', '*'] 
let NERDTreeCaseSensitiveSort=0 
let NERDTreeWinSize=27
let NERDTreeShowLineNumbers=0
let NERDTreeShowBookmarks=1 
let NERDTreeDirArrows=1
let NERDTreeChDirMode=2
let NERDChristmasTree=1
let NERDTreeMouseMode=2
let NERDTreeHighlightCursorline=1

"==========================================
" taglist插件
"==========================================
"autocmd VimEnter * if argc() == 0 && !exists("s:std_in") | TlistToggle
"autocmd bufenter * if (winnr("$") == 1 && exists("b:TlistToggle") && b:TlistToggle == "primary") | q | endif
let Tlist_Auto_Open=1
let Tlist_Show_One_File=1  
let Tlist_Exit_OnlyWindow=1  
let Tlist_Use_Right_Window = 1
let Tlist_WinWidth=27

"==========================================
" MiniBufExplorer插件
"==========================================
let g:miniBufExplMapWindowNavVim = 1   
let g:miniBufExplMapWindowNavArrows = 1   
let g:miniBufExplMapCTabSwitchBufs = 1   
let g:miniBufExplModSelTarget = 1  
let g:miniBufExplMoreThanOne=0 

"==========================================
" SuperTab插件
"==========================================
let g:SuperTabDefaultCompletionType="context" 

"==========================================
" Winmanager插件
"==========================================
"autocmd VimEnter * if argc() == 0 && !exists("s:std_in") | WMToggle
"autocmd bufenter * if (winnr("$") == 1 && exists("b:WMToggle") && b:WMToggle == "primary") | q | endif

let g:AutoOpenWinManager = 1
let g:NERDTree_title="[Explorer]"  
let g:winManagerWindowLayout = "NERDTree"
 
let g:winManagerWidth=27 
let g:defaultExplorer=2 


"==========================================
"快捷键设置
"==========================================
"insert模式删除当前行
inoremap <C-d> <esc>ddi
"insert模式插入当前时间
inoremap <C-t> <c-r>=strftime("%c")<CR>
